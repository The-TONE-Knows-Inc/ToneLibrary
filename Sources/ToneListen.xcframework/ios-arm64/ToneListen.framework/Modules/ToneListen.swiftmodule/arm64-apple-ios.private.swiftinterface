// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ToneListen
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVFoundation
import Combine
import CoreAudio
import CoreLocation
import Foundation
import Swift
import SwiftUI
@_exported import ToneListen
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class RemoteService {
  public static func handleContentActively(actionType: Swift.String, actionURL: Swift.String)
  public static func checkTone(detectedTone: Swift.String)
  @objc deinit
}
public struct ToneFrameworkData {
  public var lastDetectedTone: Swift.String
}
public class ToneAPI : Foundation.ObservableObject & ToneListen.Observer {
  @Combine.Published @_projectedValueProperty($data) public var data: ToneListen.ToneFrameworkData {
    get
    set
    _modify
  }
  public var $data: Combine.Published<ToneListen.ToneFrameworkData>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func update(subject: ToneListen.Subject)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc open class BaseTap : ObjectiveC.NSObject {
  public var bufferSize: Swift.UInt32 {
    get
  }
  public var isStarted: Swift.Bool {
    get
  }
  public var bus: Swift.Int {
    get
    set
  }
  public var input: AVFAudio.AVAudioNode {
    get
    set
  }
  public init(_ input: AVFAudio.AVAudioNode, bufferSize: Swift.UInt32)
  public func start()
  open func doHandleTapBlock(buffer: AVFAudio.AVAudioPCMBuffer, at time: AVFAudio.AVAudioTime)
  open func stop()
  public func dispose()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Subject {
  public var state: Swift.String
  @objc deinit
}
public protocol Observer : AnyObject {
  func update(subject: ToneListen.Subject)
}
@objc @_inheritsConvenienceInitializers public class NotificationsHandler : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate {
  @objc override dynamic public init()
  public static var shared: ToneListen.NotificationsHandler
  public var contentResponse: [Swift.String : Any]
  public static let clientNotificationName: Foundation.Notification.Name
  public static let notificationName: Foundation.Notification.Name
  public static let responseObjectNotificationName: Foundation.Notification.Name
  public func requestPermission()
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
@objc public class GoertzelTap : ToneListen.BaseTap {
  public init(_ input: AVFAudio.AVAudioNode, sampleRate: Swift.Float, maxFrequenciesCount: Swift.Int, bufferSize: Swift.UInt32 = 1024, toneDetectionBlock: @escaping (Swift.Int) -> Swift.Void, handler: @escaping ([Swift.Float], Swift.Int) -> Swift.Void)
  override open func stop()
  override public func doHandleTapBlock(buffer: AVFAudio.AVAudioPCMBuffer, at time: AVFAudio.AVAudioTime)
  @objc deinit
}
public enum ToneFrameworkManagerMode {
  case stream(Foundation.URL)
  case microphone
  case streamAndMicrophone(Foundation.URL)
}
public class ToneFrameworkManager {
  public init(observer: ToneListen.Observer, mode: ToneListen.ToneFrameworkManagerMode)
  public func LogTone(message: Swift.String)
  public func startRecognizer()
  public func stopRecognizer()
  public func isRecognizing() -> Combine.AnyPublisher<Swift.Bool, Swift.Never>
  @objc deinit
}
public class ToneFramework {
  public init(mode: ToneListen.ToneFrameworkManagerMode)
  public func isRunning() -> Combine.AnyPublisher<Swift.Bool, Swift.Never>
  public func start()
  public func stop()
  public func setClientId(clientID: Swift.String)
  @objc deinit
}
